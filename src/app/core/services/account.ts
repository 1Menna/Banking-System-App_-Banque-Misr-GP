// account.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, forkJoin, switchMap, throwError } from 'rxjs';
import { map } from 'rxjs/operators';
import { AccountInterface } from '../interfaces/account-interface';
import { Transaction } from '../interfaces/transaction-interface';

@Injectable({
  providedIn: 'root'
})
export class AccountService {
  private accountUrl = 'https://68a063076e38a02c58188d9c.mockapi.io/bankingsystem/Account';
  private transactionUrl = 'https://68a063076e38a02c58188d9c.mockapi.io/bankingsystem/Transaction';

  constructor(private http: HttpClient) {}

  // ---------------- Accounts ----------------
  getAllAccounts(): Observable<AccountInterface[]> {
    return this.http.get<AccountInterface[]>(this.accountUrl);
  }

  getAccountById(id: string): Observable<AccountInterface> {
    return this.http.get<AccountInterface>(`${this.accountUrl}/${id}`);
  }

  updateAccount(id: string, account: AccountInterface): Observable<AccountInterface> {
    return this.http.put<AccountInterface>(`${this.accountUrl}/${id}`, account);
  }

  deleteAccount(id: string): Observable<void> {
    return this.http.delete<void>(`${this.accountUrl}/${id}`);
  }

  // ---------------- Transactions ----------------
  getTransactions(): Observable<Transaction[]> {
    return this.http.get<Transaction[]>(this.transactionUrl);
  }

  getTransactionsByAccount(accountNo: string): Observable<Transaction[]> {
    return this.http.get<Transaction[]>(this.transactionUrl, {
      params: { fromAccountNo: accountNo }
    });
  }

  addTransaction(transaction: Transaction): Observable<Transaction> {
    return this.http.post<Transaction>(this.transactionUrl, transaction);
  }

  getTransactionById(id: string): Observable<Transaction> {
    return this.http.get<Transaction>(`${this.transactionUrl}/${id}`);
  }

  updateTransaction(id: string, transaction: Transaction): Observable<Transaction> {
    return this.http.put<Transaction>(`${this.transactionUrl}/${id}`, transaction);
  }

  deleteTransaction(id: string): Observable<void> {
    return this.http.delete<void>(`${this.transactionUrl}/${id}`);
  }

  // ---------------- Fund Transfer ----------------
  fundTransfer(
    fromAccount: AccountInterface,
    toAccount: AccountInterface,
    amount: number,
    description: string
  ): Observable<any> {
    if (fromAccount.balance < amount) {
      return throwError(() => new Error('Insufficient balance'));
    }

    // 1️⃣ update balances
    const updatedSender = { ...fromAccount, balance: fromAccount.balance - amount };
    const updatedReceiver = { ...toAccount, balance: toAccount.balance + amount };

    // 2️⃣ create transaction objects
    const debitTransaction: Transaction = {
      id: '', // will be auto-generated by API
      fromAccountNo: fromAccount.accountNo,
      ToAccountNo: toAccount.accountNo,
      date: new Date().toISOString(),
      amount,
      type: 'Debit',
      description
    };

    const creditTransaction: Transaction = {
      ...debitTransaction,
      type: 'Credit'
    };

    // 3️⃣ perform API calls in parallel
    return forkJoin([
      this.updateAccount(fromAccount.id.toString(), updatedSender),
      this.updateAccount(toAccount.id.toString(), updatedReceiver),
      this.addTransaction(debitTransaction),
      this.addTransaction(creditTransaction)
    ]).pipe(
      map(([senderRes, receiverRes, debitTx, creditTx]) => ({
        sender: senderRes,
        receiver: receiverRes,
        debitTx,
        creditTx
      }))
    );
  }
}
